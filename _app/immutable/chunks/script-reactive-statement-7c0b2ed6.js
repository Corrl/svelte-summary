import{S as C,i as R,s as j,C as $,w as H,x as J,y as N,z as O,A as w,f as P,t as q,B as z,N as S,l as _,r as m,a as B,m as g,n as v,u as d,h as i,c as D,p as G,b as y,H as r,E as L}from"./index-37ae0623.js";import{S as M}from"./Section-6b20cdf8.js";import"./index-05d60d5f.js";import"./Tutorial-0c4825ec.js";function F(u){let n,p,t,c,s,a,k,h,f,l,T=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">let</span> title<span class="token punctuation">;</span>

    <span class="token comment">// do sth whenever title changes</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a long title!'</span><span class="token punctuation">)</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token function">modifyTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">modifyTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        title <span class="token operator">=</span> title<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// reactive block</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">multiple statements can be combined</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">the current title is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> count

    <span class="token comment">// "reactive variable"</span>
    <span class="token comment">// no previous declaration 'let double/half' necessary!</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> double <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token literal-property property">$</span><span class="token operator">:</span> half <span class="token operator">=</span> count <span class="token operator">/</span> <span class="token number">2</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`;return{c(){n=_("p"),p=m("Any "),t=_("strong"),c=m("top-level statement"),s=m(" (i.e. not inside a block or a function) can be made reactive by prefixing it with the "),a=_("code"),k=m("$:"),h=m(" JS label syntax."),f=B(),l=_("pre"),this.h()},l(e){n=g(e,"P",{});var o=v(n);p=d(o,"Any "),t=g(o,"STRONG",{});var b=v(t);c=d(b,"top-level statement"),b.forEach(i),s=d(o," (i.e. not inside a block or a function) can be made reactive by prefixing it with the "),a=g(o,"CODE",{});var x=v(a);k=d(x,"$:"),x.forEach(i),h=d(o," JS label syntax."),o.forEach(i),f=D(e),l=g(e,"PRE",{class:!0});var A=v(l);A.forEach(i),this.h()},h(){G(l,"class","language-html")},m(e,o){y(e,n,o),r(n,p),r(n,t),r(t,c),r(n,s),r(n,a),r(a,k),r(n,h),y(e,f,o),y(e,l,o),l.innerHTML=T},p:L,d(e){e&&i(n),e&&i(f),e&&i(l)}}}function I(u){let n,p;const t=[u[0],E];let c={$$slots:{default:[F]},$$scope:{ctx:u}};for(let s=0;s<t.length;s+=1)c=$(c,t[s]);return n=new M({props:c}),{c(){H(n.$$.fragment)},l(s){J(n.$$.fragment,s)},m(s,a){N(n,s,a),p=!0},p(s,[a]){const k=a&1?O(t,[a&1&&w(s[0]),a&0&&w(E)]):{};a&2&&(k.$$scope={dirty:a,ctx:s}),n.$set(k)},i(s){p||(P(n.$$.fragment,s),p=!0)},o(s){q(n.$$.fragment,s),p=!1},d(s){z(n,s)}}}const E={layout:"section",id:"scriptReactiveStatement",indent:!0,h:"$: reactive statement",docs:"https://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive",tutorials:["https://svelte.dev/tutorial/reactive-declarations","https://svelte.dev/tutorial/reactive-statements"]};function K(u,n,p){return u.$$set=t=>{p(0,n=$($({},n),S(t)))},n=S(n),[n]}class X extends C{constructor(n){super(),R(this,n,K,I,j,{})}}export{X as default,E as metadata};
