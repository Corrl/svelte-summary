import{S as E,i as w,s as S,C as f,w as C,x as T,y as M,z as P,A as y,q as H,o as j,B as z,N as x,e as k,t as m,k as A,c as d,a as _,h as v,d as r,m as B,b as D,g,H as i,E as L}from"./index-26167588.js";import{S as N}from"./Section-6b147be5.js";import"./index-6967b286.js";import"./Tutorial-ee6e922e.js";function O(u){let a,p,t,c,s,n,o,b=`<code class="language-html"><span class="token comment">&lt;!-- These are equivalent --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">style:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Variables can be used --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">style:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;myColor&#125;</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Shorthand, for when property and variable name match --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">style:</span>color</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Multiple styles can be included --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">style:</span>color</span>
     <span class="token attr-name"><span class="token namespace">style:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12rem<span class="token punctuation">"</span></span>
     <span class="token attr-name"><span class="token namespace">style:</span>background-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;darkMode</span> <span class="token attr-name">?</span> <span class="token attr-name">"black"</span> <span class="token attr-name">:</span> <span class="token attr-name">"white"&#125;</span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`;return{c(){a=k("p"),p=m("The "),t=k("code"),c=m("style:"),s=m(" directive provides a shorthand for setting multiple styles on an element."),n=A(),o=k("pre"),this.h()},l(e){a=d(e,"P",{});var l=_(a);p=v(l,"The "),t=d(l,"CODE",{});var h=_(t);c=v(h,"style:"),h.forEach(r),s=v(l," directive provides a shorthand for setting multiple styles on an element."),l.forEach(r),n=B(e),o=d(e,"PRE",{class:!0});var q=_(o);q.forEach(r),this.h()},h(){D(o,"class","language-html")},m(e,l){g(e,a,l),i(a,p),i(a,t),i(t,c),i(a,s),g(e,n,l),g(e,o,l),o.innerHTML=b},p:L,d(e){e&&r(a),e&&r(n),e&&r(o)}}}function R(u){let a,p;const t=[u[0],$];let c={$$slots:{default:[O]},$$scope:{ctx:u}};for(let s=0;s<t.length;s+=1)c=f(c,t[s]);return a=new N({props:c}),{c(){C(a.$$.fragment)},l(s){T(a.$$.fragment,s)},m(s,n){M(a,s,n),p=!0},p(s,[n]){const o=n&1?P(t,[n&1&&y(s[0]),n&0&&y($)]):{};n&2&&(o.$$scope={dirty:n,ctx:s}),a.$set(o)},i(s){p||(H(a.$$.fragment,s),p=!0)},o(s){j(a.$$.fragment,s),p=!1},d(s){z(a,s)}}}const $={layout:"section",id:"elemStyleProperty",indent:!0,h:"style:property",docs:"https://svelte.dev/docs#template-syntax-element-directives-style-property",tutorials:["https://svelte.dev/tutorial/style-directive"]};function V(u,a,p){return u.$$set=t=>{p(0,a=f(f({},a),x(t)))},a=x(a),[a]}class K extends E{constructor(a){super(),w(this,a,V,R,S,{})}}export{K as default,$ as metadata};
