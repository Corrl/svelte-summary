import{S as b,i as g,s as y,C as u,w,x,y as S,z as $,A as p,q as E,o as N,B as q,N as m,e as d,t as C,k as H,c as _,a as h,h as I,d as i,m as J,b as P,g as c,H as j,E as k}from"./index-26167588.js";import{S as z}from"./Section-6b147be5.js";import"./index-6967b286.js";import"./Tutorial-ee6e922e.js";function A(r){let e,o,l,s,a=`<code class="language-html">import &#123; writable &#125; from 'svelte/store';

export const count = writable('startValue');</code>`;return{c(){e=d("p"),o=C(`Not all application state belongs inside your application\u2019s component hierarchy. Sometimes, you\u2019ll have values that need to be accessed by multiple unrelated components, or by a regular JavaScript module.
In Svelte, we do this with stores.`),l=H(),s=d("pre"),this.h()},l(t){e=_(t,"P",{});var n=h(e);o=I(n,`Not all application state belongs inside your application\u2019s component hierarchy. Sometimes, you\u2019ll have values that need to be accessed by multiple unrelated components, or by a regular JavaScript module.
In Svelte, we do this with stores.`),n.forEach(i),l=J(t),s=_(t,"PRE",{class:!0});var v=h(s);v.forEach(i),this.h()},h(){P(s,"class","language-html")},m(t,n){c(t,e,n),j(e,o),c(t,l,n),c(t,s,n),s.innerHTML=a},p:k,d(t){t&&i(e),t&&i(l),t&&i(s)}}}function B(r){let e,o;const l=[r[0],f];let s={$$slots:{default:[A]},$$scope:{ctx:r}};for(let a=0;a<l.length;a+=1)s=u(s,l[a]);return e=new z({props:s}),{c(){w(e.$$.fragment)},l(a){x(e.$$.fragment,a)},m(a,t){S(e,a,t),o=!0},p(a,[t]){const n=t&1?$(l,[t&1&&p(a[0]),t&0&&p(f)]):{};t&2&&(n.$$scope={dirty:t,ctx:a}),e.$set(n)},i(a){o||(E(e.$$.fragment,a),o=!0)},o(a){N(e.$$.fragment,a),o=!1},d(a){q(e,a)}}}const f={layout:"section",id:"writable",indent:!0,h:"writable",docs:"https://svelte.dev/docs#run-time-svelte-store-writable",tutorials:["https://svelte.dev/tutorial/writable-stores","https://svelte.dev/tutorial/store-bindings"]};function L(r,e,o){return r.$$set=l=>{o(0,e=u(u({},e),m(l)))},e=m(e),[e]}class W extends b{constructor(e){super(),g(this,e,L,B,y,{})}}export{W as default,f as metadata};
