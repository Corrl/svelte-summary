import{S as D,i as H,s as O,C as x,w as P,x as R,y as j,z,A as E,q as A,o as L,B as M,N as C,e as g,t as d,k as N,c as h,a as y,h as _,d as r,m as U,b as F,g as w,H as p,E as G}from"./index-26167588.js";import{S as I}from"./Section-6b147be5.js";import"./index-6967b286.js";import"./Tutorial-ee6e922e.js";function J(u){let s,o,a,c,t,n,m,f,v,b,k,i,q=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
	<span class="token selector">div</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/* will only apply to div elements belonging to this component*/</span>
	<span class="token punctuation">&#125;</span>
    <span class="token selector">div :global(.my-class)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/* will apply to all elements with 'my-class' inside a div belonging */</span>
        <span class="token comment">/* to this component. Useful if the compiler doesn't know of the class, */</span>
        <span class="token comment">/* but the styling should still be scoped */</span>
    <span class="token punctuation">&#125;</span>
	<span class="token selector">:global(p)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/* will apply to all p elements in app*/</span>
	<span class="token punctuation">&#125;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`;return{c(){s=g("p"),o=d("CSS inside a "),a=g("code"),c=d("<style>"),t=d(" block will be scoped to that component."),n=g("br"),m=d(`
To apply styles to a selector globally, use the `),f=g("code"),v=d(":global(...)"),b=d(" modifier."),k=N(),i=g("pre"),this.h()},l(l){s=h(l,"P",{});var e=y(s);o=_(e,"CSS inside a "),a=h(e,"CODE",{});var S=y(a);c=_(S,"<style>"),S.forEach(r),t=_(e," block will be scoped to that component."),n=h(e,"BR",{}),m=_(e,`
To apply styles to a selector globally, use the `),f=h(e,"CODE",{});var $=y(f);v=_($,":global(...)"),$.forEach(r),b=_(e," modifier."),e.forEach(r),k=U(l),i=h(l,"PRE",{class:!0});var B=y(i);B.forEach(r),this.h()},h(){F(i,"class","language-html")},m(l,e){w(l,s,e),p(s,o),p(s,a),p(a,c),p(s,t),p(s,n),p(s,m),p(s,f),p(f,v),p(s,b),w(l,k,e),w(l,i,e),i.innerHTML=q},p:G,d(l){l&&r(s),l&&r(k),l&&r(i)}}}function K(u){let s,o;const a=[u[0],T];let c={$$slots:{default:[J]},$$scope:{ctx:u}};for(let t=0;t<a.length;t+=1)c=x(c,a[t]);return s=new I({props:c}),{c(){P(s.$$.fragment)},l(t){R(s.$$.fragment,t)},m(t,n){j(s,t,n),o=!0},p(t,[n]){const m=n&1?z(a,[n&1&&E(t[0]),n&0&&E(T)]):{};n&2&&(m.$$scope={dirty:n,ctx:t}),s.$set(m)},i(t){o||(A(s.$$.fragment,t),o=!0)},o(t){L(s.$$.fragment,t),o=!1},d(t){M(s,t)}}}const T={layout:"section",id:"style",h:"<style>",docs:"https://svelte.dev/docs#component-format-style",tutorials:["https://svelte.dev/tutorial/styling"]};function Q(u,s,o){return u.$$set=a=>{o(0,s=x(x({},s),C(a)))},s=C(s),[s]}class Z extends D{constructor(s){super(),H(this,s,Q,K,O,{})}}export{Z as default,T as metadata};
